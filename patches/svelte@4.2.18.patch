diff --git a/src/compiler/interfaces.d.ts b/src/compiler/interfaces.d.ts
index 4d72cd309a1c1877d89f4fc70dbf7e74a75f7da8..15ad60e336f9a6887cc2f4d80dee63054622fc4d 100644
--- a/src/compiler/interfaces.d.ts
+++ b/src/compiler/interfaces.d.ts
@@ -1,11 +1,15 @@
 import { AssignmentExpression, Node, Program } from 'estree';
 import { SourceMap } from 'magic-string';
+import type { File } from '@babel/types'
+import type { CssNode } from '@types/css-tree'
 
 interface BaseNode {
 	start: number;
 	end: number;
 	type: string;
 	children?: TemplateNode[];
+  prev?: TemplateNode;
+  next?: TemplateNode;
 	[prop_name: string]: any;
 }
 
@@ -35,11 +39,34 @@ export interface ConstTag extends BaseNode {
 	expression: AssignmentExpression;
 }
 
-interface DebugTag extends BaseNode {
+export interface DebugTag extends BaseNode {
 	type: 'DebugTag';
 	identifiers: Node[];
 }
 
+export interface IfBlock extends BaseNode {
+  type: 'IfBlock';
+  elseif?: boolean;
+  expression: Node;
+  children: TemplateNode[];
+  else?: ElseBlock;
+}
+
+export interface ElseBlock extends BaseNode {
+  type: 'ElseBlock';
+  children: TemplateNode[];
+}
+
+export interface EachBlock extends BaseNode {
+  type: 'EachBlock';
+  children: TemplateNode[];
+  expression: Node;
+  context: Node;
+  index?: string;
+  key?: Node;
+  else?: ElseBlock;
+}
+
 export type DirectiveType =
 	| 'Action'
 	| 'Animation'
@@ -79,6 +106,10 @@ export interface Element extends BaseNode {
 	name: string;
 }
 
+export interface ComponentTag extends Element {
+  expression: Node;
+}
+
 export interface Attribute extends BaseNode {
 	type: 'Attribute';
 	name: string;
@@ -90,23 +121,37 @@ export interface SpreadAttribute extends BaseNode {
 	expression: Node;
 }
 
+export interface ShorthandAttribute extends BaseNode {
+	type: 'AttributeShorthand';
+	expression: Node;
+}
+
 export interface Transition extends BaseExpressionDirective {
 	type: 'Transition';
 	intro: boolean;
 	outro: boolean;
 }
 
-export type Directive = BaseDirective | BaseExpressionDirective | Transition;
+export interface StyleDirective extends BaseExpressionDirective {
+  value: any;
+}
+
+export type Directive = BaseDirective | BaseExpressionDirective | Transition | StyleDirective;
 
 export type TemplateNode =
 	| Text
 	| ConstTag
 	| DebugTag
 	| MustacheTag
+  | IfBlock
+  | ElseBlock
+  | EachBlock
 	| BaseNode
 	| Element
+  | ComponentTag
 	| Attribute
 	| SpreadAttribute
+	| ShorthandAttribute
 	| Directive
 	| Transition
 	| Comment;
@@ -127,13 +172,14 @@ export interface Parser {
 export interface Script extends BaseNode {
 	type: 'Script';
 	context: string;
-	content: Program;
+	attributes: any[];
+	content: File;
 }
 
 export interface Style extends BaseNode {
 	type: 'Style';
 	attributes: any[]; // TODO
-	children: any[]; // TODO add CSS node types
+	children: CssNode[]; // TODO add CSS node types
 	content: {
 		start: number;
 		end: number;
diff --git a/src/compiler/parse/acorn.js b/src/compiler/parse/acorn.js
index 85d219d8c9a024e0cb35e9554d8fef6c0458c3fd..a4f0fc5cf95e1c16c4402cf196fce36a80c4a48b 100644
--- a/src/compiler/parse/acorn.js
+++ b/src/compiler/parse/acorn.js
@@ -1,13 +1,13 @@
 import * as code_red from 'code-red';
+import babel from '@babel/parser';
 
 /**
  * @param {string} source
  */
 export const parse = (source) =>
-	code_red.parse(source, {
+	babel.parse(source, {
 		sourceType: 'module',
-		ecmaVersion: 13,
-		locations: true
+		// plugins: ['estree']
 	});
 
 /**
diff --git a/src/compiler/parse/read/script.js b/src/compiler/parse/read/script.js
index 3d4ab358df18d42b7af4288ff3b4718d1774ec44..fcdfbd2bcd078253c671da3d01e00278c206364e 100644
--- a/src/compiler/parse/read/script.js
+++ b/src/compiler/parse/read/script.js
@@ -55,6 +55,7 @@ export default function read_script(parser, start, attributes) {
 		type: 'Script',
 		start,
 		end: parser.index,
+		attributes,
 		context: get_context(parser, attributes, start),
 		content: ast
 	};
diff --git a/types/index.d.ts b/types/index.d.ts
index 2055385b0a8af122d4cff8dcccdf456ef0b3c239..85ff405e8155e07093c72a85b170079fa943a809 100644
--- a/types/index.d.ts
+++ b/types/index.d.ts
@@ -90,7 +90,7 @@ declare module 'svelte' {
 	/**
 	 * Base class for Svelte components. Used when dev=false.
 	 *
-	 * 
+	 *
 	 */
 	class SvelteComponent_1<Props extends Record<string, any> = any, Events extends Record<string, any> = any> {
 		/**
@@ -107,11 +107,11 @@ declare module 'svelte' {
 		 *
 		 * */
 		$$set: any;
-		
+
 		$destroy(): void;
-		
+
 		$on<K extends Extract<keyof Events, string>>(type: K, callback: ((e: Events[K]) => void) | null | undefined): () => void;
-		
+
 		$set(props: Partial<Props>): void;
 	}
 	/**
@@ -137,10 +137,10 @@ declare module 'svelte' {
 	 * </script>
 	 * <MyComponent foo={'bar'} />
 	 * ```
-	 * 
+	 *
 	 */
 	export class SvelteComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any> extends SvelteComponent_1<Props, Events> { [prop: string]: any;
-		
+
 		constructor(options: ComponentConstructorOptions<Props>);
 		/**
 		 * For type checking capabilities only.
@@ -163,14 +163,14 @@ declare module 'svelte' {
 		 *
 		 * */
 		$$slot_def: Slots;
-		
+
 		$capture_state(): void;
-		
+
 		$inject_state(): void;
 	}
 	/**
 	 * @deprecated Use `SvelteComponent` instead. See PR for more information: https://github.com/sveltejs/svelte/pull/8512
-	 * 
+	 *
 	 */
 	export class SvelteComponentTyped<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any> extends SvelteComponent<Props, Events, Slots> {
 	}
@@ -275,18 +275,23 @@ declare module 'svelte' {
 declare module 'svelte/compiler' {
 	import type { AssignmentExpression, Node, Program } from 'estree';
 	import type { SourceMap } from 'magic-string';
+	import type { File } from '@babel/types';
+  import type { CssNode, CssNode } from '@types/css-tree'
 	export { walk } from 'estree-walker';
 	interface BaseNode {
 		start: number;
 		end: number;
 		type: string;
 		children?: TemplateNode[];
+    prev?: TemplateNode;
+    next?: TemplateNode;
 		[prop_name: string]: any;
 	}
 
 	interface Text extends BaseNode {
 		type: 'Text';
 		data: string;
+		raw: string;
 	}
 
 	interface MustacheTag extends BaseNode {
@@ -310,6 +315,29 @@ declare module 'svelte/compiler' {
 		identifiers: Node[];
 	}
 
+  interface IfBlock extends BaseNode {
+    type: 'IfBlock';
+    elseif?: boolean;
+    expression: Node;
+    children: TemplateNode[];
+    else?: ElseBlock;
+  }
+
+  interface ElseBlock extends BaseNode {
+    type: 'ElseBlock';
+    children: TemplateNode[];
+  }
+
+  interface EachBlock extends BaseNode {
+    type: 'EachBlock';
+    children: TemplateNode[];
+    expression: Node;
+    context: Node;
+    index?: string;
+    key?: Node;
+    else?: ElseBlock;
+  }
+
 	type DirectiveType =
 		| 'Action'
 		| 'Animation'
@@ -349,6 +377,10 @@ declare module 'svelte/compiler' {
 		name: string;
 	}
 
+  interface ComponentTag extends Element {
+    expression: Node;
+  }
+
 	interface Attribute extends BaseNode {
 		type: 'Attribute';
 		name: string;
@@ -360,23 +392,37 @@ declare module 'svelte/compiler' {
 		expression: Node;
 	}
 
+	interface ShorthandAttribute extends BaseNode {
+		type: 'AttributeShorthand';
+		expression: Node;
+	}
+
 	interface Transition extends BaseExpressionDirective {
 		type: 'Transition';
 		intro: boolean;
 		outro: boolean;
 	}
 
-	type Directive = BaseDirective | BaseExpressionDirective | Transition;
+  interface StyleDirective extends BaseExpressionDirective {
+    value: any;
+  }
+
+	type Directive = BaseDirective | BaseExpressionDirective | Transition | StyleDirective;
 
 	type TemplateNode =
 		| Text
 		| ConstTag
 		| DebugTag
 		| MustacheTag
+    | IfBlock
+    | ElseBlock
+    | EachBlock
 		| BaseNode
 		| Element
+    | ComponentTag
 		| Attribute
 		| SpreadAttribute
+		| ShorthandAttribute
 		| Directive
 		| Transition
 		| Comment;
@@ -384,13 +430,14 @@ declare module 'svelte/compiler' {
 	interface Script extends BaseNode {
 		type: 'Script';
 		context: string;
-		content: Program;
+		attributes: any[];
+		content: File;
 	}
 
 	interface Style extends BaseNode {
 		type: 'Style';
 		attributes: any[]; // TODO
-		children: any[]; // TODO add CSS node types
+		children: CssNode[]; // TODO add CSS node types
 		content: {
 			start: number;
 			end: number;
@@ -866,12 +913,16 @@ declare module 'svelte/types/compiler/preprocess' {
 
 declare module 'svelte/types/compiler/interfaces' {
 	import type { AssignmentExpression, Node, Program } from 'estree';
+	import type { File } from '@babel/types';
+  import type { CssNode } from '@types/css-tree'
 	import type { SourceMap } from 'magic-string';
 	interface BaseNode {
 		start: number;
 		end: number;
 		type: string;
 		children?: TemplateNode[];
+    prev?: TemplateNode;
+    next?: TemplateNode;
 		[prop_name: string]: any;
 	}
 
@@ -883,6 +934,7 @@ declare module 'svelte/types/compiler/interfaces' {
 	export interface Text extends BaseNode {
 		type: 'Text';
 		data: string;
+		raw: string;
 	}
 
 	export interface MustacheTag extends BaseNode {
@@ -901,11 +953,34 @@ declare module 'svelte/types/compiler/interfaces' {
 		expression: AssignmentExpression;
 	}
 
-	interface DebugTag extends BaseNode {
+	export interface DebugTag extends BaseNode {
 		type: 'DebugTag';
 		identifiers: Node[];
 	}
 
+  export interface IfBlock extends BaseNode {
+    type: 'IfBlock';
+    elseif?: boolean;
+    expression: Node;
+    children: TemplateNode[];
+    else?: ElseBlock;
+  }
+
+  export interface ElseBlock extends BaseNode {
+    type: 'ElseBlock';
+    children: TemplateNode[];
+  }
+
+  export interface EachBlock extends BaseNode {
+    type: 'EachBlock';
+    children: TemplateNode[];
+    expression: Node;
+    context: Node;
+    index?: string;
+    key?: Node;
+    else?: ElseBlock;
+  }
+
 	export type DirectiveType =
 		| 'Action'
 		| 'Animation'
@@ -945,6 +1020,10 @@ declare module 'svelte/types/compiler/interfaces' {
 		name: string;
 	}
 
+  export interface ComponentTag extends Element {
+    expression: Node;
+  }
+
 	export interface Attribute extends BaseNode {
 		type: 'Attribute';
 		name: string;
@@ -956,23 +1035,37 @@ declare module 'svelte/types/compiler/interfaces' {
 		expression: Node;
 	}
 
+	export interface ShorthandAttribute extends BaseNode {
+		type: 'AttributeShorthand';
+		expression: Node;
+	}
+
 	export interface Transition extends BaseExpressionDirective {
 		type: 'Transition';
 		intro: boolean;
 		outro: boolean;
 	}
 
-	export type Directive = BaseDirective | BaseExpressionDirective | Transition;
+  export interface StyleDirective extends BaseExpressionDirective {
+    value: any;
+  }
+
+	export type Directive = BaseDirective | BaseExpressionDirective | Transition | StyleDirective;
 
 	export type TemplateNode =
 		| Text
 		| ConstTag
 		| DebugTag
 		| MustacheTag
+    | IfBlock
+    | ElseBlock
+    | EachBlock
 		| BaseNode
 		| Element
+    | ComponentTag
 		| Attribute
 		| SpreadAttribute
+		| ShorthandAttribute
 		| Directive
 		| Transition
 		| Comment;
@@ -993,13 +1086,14 @@ declare module 'svelte/types/compiler/interfaces' {
 	export interface Script extends BaseNode {
 		type: 'Script';
 		context: string;
-		content: Program;
+		attributes: any[];
+		content: File;
 	}
 
 	export interface Style extends BaseNode {
 		type: 'Style';
 		attributes: any[]; // TODO
-		children: any[]; // TODO add CSS node types
+		children: CssNode[]; // TODO add CSS node types
 		content: {
 			start: number;
 			end: number;
