// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`transformSvelteScript > $ label statement > assign expression 1`] = `
"import { ref, computed, watchEffect } from 'vue/vapor'
const a = ref(1)
function foo(v) {
  a.value = v
}
const b = computed(() => a.value)

const c = computed(() => bar(b.value) * 2)

watchEffect(() => foo(c.value))

function bar(d) {
  return b.value + c.value + d
}
console.log(b.value, c.value, bar(1))
"
`;

exports[`transformSvelteScript > $ label statement > block statement 1`] = `
"import { ref, watchEffect } from 'vue/vapor'
const a = 1
const b = ref(2)
watchEffect(() => {
  console.log(a, b.value)
})
"
`;

exports[`transformSvelteScript > MVP: counter case > code only 1`] = `
"import { ref } from 'vue/vapor'
const count = ref(0)
const increment = () => {
  count.value += 1
}"
`;

exports[`transformSvelteScript > MVP: counter case > with ast 1`] = `
"import { ref } from 'vue/vapor'

const count = ref(0)
const increment = () => {
  count.value += 1
}
"
`;

exports[`transformSvelteScript > MVP: counter case > with ast 2`] = `
SourceMap {
  "file": undefined,
  "mappings": ";;AACA;AACA,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,WAAK,CAAC,CAAC,CAAC,CAAC;AACX;",
  "names": [],
  "sources": [
    "test.svelte",
  ],
  "sourcesContent": [
    "
let count = 0
const increment = () => {
  count += 1
}
",
  ],
  "version": 3,
}
`;

exports[`transformSvelteScript > replace import 'svelte' 1`] = `
"import { onMount } from 'svelte-vapor-runtime'
onMount(() => { console.log('mounted') })
"
`;

exports[`transformSvelteScript > replace import 'svelte/store' 1`] = `
"import { readable, useWritableStore, writable, useWritableStore } from 'svelte-vapor-runtime/store'
const count = readable(0)
const $count = useReadableStore(count)
const flag = writable(false)
const $flag = useWritableStore(flag)
flag.set(true)
console.log($count.value, $flag.value)
$flag.value = false
"
`;

exports[`transformSvelteScript > replace svelte props definition > basic 1`] = `
"import { ref } from 'vue/vapor'
const foo = defineModel('foo')
const bar = defineModel('bar')

const baz = ref(1)
console.log(foo, bar, baz.value)

"
`;

exports[`transformSvelteScript > replace svelte props definition > default 1`] = `
"import a1 from 'foo'
const baz = defineModel('baz', { default: 2 })
const { foo = 'readonly', bar = 1 } = defineProps(['foo', 'bar'])

a1()

console.log(foo, bar, baz)

"
`;

exports[`transformSvelteScript > script context module > basic 1`] = `
"import { ref } from 'vue/vapor'

const foo = ref('hello')
const bar = ref(1)
bar.value.toString()
const buz = () => {}
function fn1() {
  console.log('fn1', foo.value)
}

const a = ref(1)
function setFoo() {
  a.value = foo.value
}
defineExpose({ foo, fn1 })"
`;
