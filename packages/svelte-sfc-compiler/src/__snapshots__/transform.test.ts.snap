// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`transformSvelteScript > MVP: counter case > code only 1`] = `
"import { ref } from 'vue/vapor'
let count = ref(0)
const increment = () => {
  count.value += 1
}"
`;

exports[`transformSvelteScript > MVP: counter case > with ast 1`] = `
"import { ref } from 'vue/vapor'

let count = ref(0)
const increment = () => {
  count.value += 1
}
"
`;

exports[`transformSvelteScript > MVP: counter case > with ast 2`] = `
SourceMap {
  "file": undefined,
  "mappings": ";;AACA,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;AACZ,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,WAAK,CAAC,CAAC,CAAC,CAAC;AACX;",
  "names": [],
  "sources": [
    "test.svelte",
  ],
  "sourcesContent": [
    "
let count = 0
const increment = () => {
  count += 1
}
",
  ],
  "version": 3,
}
`;

exports[`transformSvelteScript > replace import 'svelte' 1`] = `
"import { onMount } from 'svelte-vapor-runtime'
onMount(() => { console.log('mounted') })
"
`;

exports[`transformSvelteScript > replace import 'svelte/store' 1`] = `
"import { readable, writable, useWritableStore, useReadableStore } from 'svelte-vapor-runtime/store'
const count = readable(0)
const $count = useReadableStore(count)
const flag = writable(false)
const $flag = useWritableStore(flag)
flag.set(true)
console.log($count.value, $flag.value)
$flag.value = false
"
`;

exports[`transformSvelteScript > replace svelte props definition > basic 1`] = `
"import { ref } from 'vue/vapor'
const foo = defineModel('foo')
const bar = defineModel('bar')

const baz = ref(1)
console.log(foo, bar, baz.value)

"
`;

exports[`transformSvelteScript > replace svelte props definition > default 1`] = `
"const baz = defineModel('baz', { default: 2 })
const { foo = 'readonly', bar = 1 } = defineProps(['foo', 'bar'])


console.log(foo, bar, baz)

"
`;

exports[`transformSvelteScript > rereplace svelte $ label block 1`] = `
"import { ref, watchEffect } from 'vue/vapor'
const a = ref(1)
watchEffect(() => {
  console.log('a', a)
})
"
`;
